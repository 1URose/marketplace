basePath: /
definitions:
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  dto.SignUpRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.SignUpResponse:
    properties:
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для работы с пользователями и ритейлерами
  title: User Info API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя и возврат токенов JWT
      parameters:
      - description: User login payload
        in: body
        name: user_input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access и Refresh токены
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Вход в систему
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: При истечении срока действия access-токена позволяет получить новую
        пару токенов.
      parameters:
      - description: 'Текущий access-токен: Bearer <token>'
        in: header
        name: Authorization
        type: string
      - description: 'Refresh-токен: Bearer <token>'
        in: header
        name: X-Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Новые access и refresh токены
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "401":
          description: Invalid or missing token
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Обновление токенов
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создать обычного пользователя
      parameters:
      - description: User registration payload
        in: body
        name: user_input
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/dto.SignUpResponse'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /user:
    get:
      description: Возвращает список всех пользователей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Получение всех пользователей
      tags:
      - user
  /user/{id}:
    get:
      description: Возвращает информацию о пользователе по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Получение пользователя по ID
      tags:
      - user
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
