basePath: /
definitions:
  dto.AdBaseResponse:
    properties:
      author_email:
        type: string
      author_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      is_mine:
        type: boolean
      price:
        type: integer
      title:
        type: string
    type: object
  dto.CreateAdRequest:
    properties:
      description:
        type: string
      image_url:
        type: string
      price:
        type: integer
      title:
        type: string
    required:
    - description
    - image_url
    - price
    - title
    type: object
  dto.CreateAdResponse:
    properties:
      author_email:
        type: string
      author_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      is_mine:
        type: boolean
      price:
        type: integer
      title:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      detail:
        type: string
      error:
        type: string
    type: object
  dto.GetAllAdsResponse:
    properties:
      ads:
        items:
          $ref: '#/definitions/dto.AdBaseResponse'
        type: array
      count_pages:
        type: integer
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  dto.SignUpRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.SignUpResponse:
    properties:
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.StillValidResponse:
    properties:
      detail:
        type: string
      still_valid:
        type: boolean
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password_hash:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API реализующее работу с пользователями и объявлениями
  title: Marketplace API
  version: "1.0"
paths:
  /ad:
    post:
      consumes:
      - application/json
      description: Создаёт объявление от имени текущего пользователя
      parameters:
      - description: JWT Access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Данные для создания объявления
        in: body
        name: ad
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAdRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Созданное объявление
          schema:
            $ref: '#/definitions/dto.CreateAdResponse'
        "400":
          description: Неверные данные запроса
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Создать новое объявление
      tags:
      - ads
  /ads:
    get:
      consumes:
      - application/json
      description: Возвращает постраничный, сортируемый и фильтруемый список объявлений
      parameters:
      - description: JWT Access token
        in: header
        name: Authorization
        type: string
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: created_at
        description: Сортировать по полю
        enum:
        - created_at
        - price
        in: query
        name: sort_by
        type: string
      - default: desc
        description: Порядок сортировки
        enum:
        - desc
        - asc
        in: query
        name: sort_order
        type: string
      - description: Минимальная цена фильтрации
        in: query
        minimum: 0
        name: min_price
        type: integer
      - description: Максимальная цена фильтрации
        in: query
        minimum: 0
        name: max_price
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список объявлений и количество страниц
          schema:
            items:
              $ref: '#/definitions/dto.GetAllAdsResponse'
            type: array
        "400":
          description: Неверные параметры запроса
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Получить список объявлений
      tags:
      - ads
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя и возврат токенов JWT
      parameters:
      - description: User login payload
        in: body
        name: user_input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access и Refresh токены
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Вход в систему
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: При истечении срока действия access-токена позволяет получить новую
        пару токенов.
      parameters:
      - description: 'Текущий access-токен: Bearer <token>'
        in: header
        name: Authorization
        type: string
      - description: 'Refresh-токен: Bearer <token>'
        in: header
        name: X-Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access токен ещё действует
          schema:
            $ref: '#/definitions/dto.StillValidResponse'
        "401":
          description: Invalid or missing token
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Обновление токенов
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Создать обычного пользователя
      parameters:
      - description: Регистрационные данные
        in: body
        name: user_input
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/dto.SignUpResponse'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /user:
    get:
      description: Возвращает список всех пользователей вместе с их данными(Хэш пароль
        в частности - для тестирования)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Получение всех пользователей
      tags:
      - user
schemes:
- http
swagger: "2.0"
